start = (
  {
    'input': '''Create a simple web application using python and flask.  The web application should 
    render a single page divided into two vertical halves.  On page load the \n 
    user should be able to put in a link to a pdf or webpage, click a submit button and have the application convert that pdf or 
    webpage to text and display that pdf or webpage.  on the left side of the screen.  the right side of the screen is reserved for 
    other functionality.\n The page should have a dark theme, with attractive modern styling.''', 
    'n': 3, 'previous_work': None
      
  }
  
)

dictionary = (
{'input': 'Create a simple web application using python and flask.  The web application should render a single page divided into two vertical halves.  On page load the \n user should be able to put in a link to a pdf or webpage, click a submit button and have the application convert that pdf or webpage to text and display that pdf or webpage.  on the left side of the screen.  the right side of the screen is reserved for other functionality.\n The page should have a dark theme, with attractive modern styling.', 'n': 3, 'previous_work': None, 'task_1': 'I need to set up a Python environment and install Flask and other necessary libraries.\n\n', 'task_2': 'I need to create a new Flask application with a single route that renders the main page.\n\n', 'task_3': 'I need to design an HTML template for the main page, divided into two vertical halves, with a dark theme and modern styling.\n\n', 'task_4': 'I need to add a form to the left side of the main page, allowing users to input a link to a PDF or webpage and a submit button.\n\n', 'task_5': 'I need to create a function that accepts a URL as input and determines if it is a PDF or a webpage.\n\n', 'task_6': 'I need to create a function that converts a PDF to text using a suitable library, such as PyPDF2 or pdfplumber.\n\n', 'task_7': 'I need to create a function that extracts text from a webpage using a suitable library, such as BeautifulSoup or requests-html.\n\n', 'task_8': 'I need to modify the Flask route to handle form submissions, call the appropriate conversion function based on the input URL, and display the extracted text on the left side of the main page.\n\n', 'task_9': 'I need to reserve the right side of the main page for future functionality.\n\n', 'task_10': 'I need to test the web application to ensure it works as expected and debug any issues that arise.', 'goal': 'Provide instructions to set up a Python environment and install Flask and other necessary libraries for the web application project.\n\n', 'success_criteria_1': 'The instructions should clearly explain how to set up a Python virtual environment.\n\n', 'success_criteria_2': 'The instructions should include the installation of Flask and its dependencies.\n\n', 'success_criteria_3': 'The instructions should mention any additional libraries required for the project, such as PyPDF2, pdfplumber, BeautifulSoup, or requests-html.\n\n', 'success_criteria_4': 'The instructions should be easy to follow and suitable for someone with basic Python knowledge.', 'success_criteria_5': 'The application should convert the PDF or webpage content to text.\n\n', 'success_criteria_6': 'The converted text should be displayed on the left side of the screen.\n\n', 'success_criteria_7': 'The right side of the screen should be reserved for other functionality.\n\n', 'success_criteria_8': 'The page should have a dark theme.\n\n', 'success_criteria_9': 'The styling of the page should be modern and attractive.', 'tasks': ['I need to set up a Python environment and install Flask and other necessary libraries.\n\n', 'I need to create a new Flask application with a single route that renders the main page.\n\n', 'I need to design an HTML template for the main page, divided into two vertical halves, with a dark theme and modern styling.\n\n', 'I need to add a form to the left side of the main page, allowing users to input a link to a PDF or webpage and a submit button.\n\n', 'I need to create a function that accepts a URL as input and determines if it is a PDF or a webpage.\n\n', 'I need to create a function that converts a PDF to text using a suitable library, such as PyPDF2 or pdfplumber.\n\n', 'I need to create a function that extracts text from a webpage using a suitable library, such as BeautifulSoup or requests-html.\n\n', 'I need to modify the Flask route to handle form submissions, call the appropriate conversion function based on the input URL, and display the extracted text on the left side of the main page.\n\n', 'I need to reserve the right side of the main page for future functionality.\n\n', 'I need to test the web application to ensure it works as expected and debug any issues that arise.', '[]', 'I need to set up a Python environment and install Flask and other necessary libraries.\n\n', 'Yes\n\n', 'The current task is specific and clear, requiring the setup of a Python environment and installation of Flask and other necessary libraries. It does not require multiple deliverables, processes, technologies, or tools, and it will not lead to a response that is more than 2,000 words long.'], 'criteria': ['The instructions should clearly explain how to set up a Python virtual environment.\n\n', 'The instructions should include the installation of Flask and its dependencies.\n\n', 'The instructions should mention any additional libraries required for the project, such as PyPDF2, pdfplumber, BeautifulSoup, or requests-html.\n\n', 'The instructions should be easy to follow and suitable for someone with basic Python knowledge.', 'The application should convert the PDF or webpage content to text.\n\n', 'The converted text should be displayed on the left side of the screen.\n\n', 'The right side of the screen should be reserved for other functionality.\n\n', 'The page should have a dark theme.\n\n', 'The styling of the page should be modern and attractive.', '[]'], 'pass': 'Yes\n\n', 'reason': "The AI's plan consists of several discrete and specific sub-tasks that can be accomplished by a Large Language Model AI. Each sub-task is detailed enough to avoid room for interpretation and can be encapsulated in a single modular output. The sub-tasks are appropriately sized to fit into a single prompt to an LLM. When combined, the completion of these sub-tasks will meet the project's success criteria as outlined by the user.", 'current_task': 'I need to set up a Python environment and install Flask and other necessary libraries.\n\n', 'task_pass': 'Yes\n\n', 'task_pass_reason': 'The current task is specific and clear, requiring the setup of a Python environment and installation of Flask and other necessary libraries. It does not require multiple deliverables, processes, technologies, or tools, and it will not lead to a response that is more than 2,000 words long.'}
)
def get_dictionaries():
  dictionaries = {}
  dictionaries["task1 subtask0"] = dictionary
  return dictionaries
